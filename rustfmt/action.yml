name: "Check formatting of Rust code with rustfmt"
description: |
  Run `cargo fmt` and check Rust code.
  Highlights places which are not correctly formatted.
branding:
  icon: "check-square"
  color: "yellow"

inputs:
  manifest-path:
    description: "Specify the --manifest-path argument to rustfmt"
    required: false
    default: "./Cargo.toml"
  alias:
    description: "Fmt alias to run"
    required: false
    default: "fmt"

runs:
  using: composite
  steps:
    - name: Rustfmt Job Summary
      shell: bash
      run: |
        # Split alias command's options
        echo "0"
        alias2=$(grep -e "${{ inputs.alias }}[[:space:]]*=" .cargo/config | tr -d '"')
        echo "0.5"
        alias=$(grep -e "${{ inputs.alias }}[[:space:]]*=" .cargo/config | tr -d '"' | awk '/^${{ inputs.alias }}[[:space:]]*=/ {sub(/^${{ inputs.alias }}[[:space:]]*=[[:space:]]*/, ""); print; exit}')
        echo "1"
        before_empty_dashes=""
        after_empty_dashes=""
        reached_empty_dashes=false
        echo "2"
        IFS=' '
        echo "3"
        read -ra args <<< "$alias"
        echo "4"
        if [[ "${args[0]}" != "fmt" && "${{ inputs.alias }}" != "fmt" ]]; then
          echo "The provided alias is invalid!";
        fi
        echo "5"
        for arg in "${args[@]}"; do
          if [[ "$arg" == "--" ]]; then
            reached_empty_dashes=true;
            continue;
          fi
          echo "6"
          if $reached_empty_dashes; then
            after_empty_dashes="$after_empty_dashes $arg";
          else
            before_empty_dashes="$before_empty_dashes $arg";
          fi
        done
        echo "7"
        # Run cargo and store the original output
        CARGO_STATUS=0
        CARGO_OUTPUT=$(cargo ${before_empty_dashes:-fmt} --all --manifest-path=${{ inputs.manifest-path }} -- $after_empty_dashes --color=always --check 2>/dev/null) || CARGO_STATUS=$?
        echo "8"
        if [ ${CARGO_STATUS} -eq 0 ]; then
            echo "9"
            cat <<MARKDOWN_INTRO >> $GITHUB_STEP_SUMMARY
        # Rustfmt Results

        The code is formatted perfectly!
        MARKDOWN_INTRO
        else
            echo "10"
            cat <<MARKDOWN_INTRO >> $GITHUB_STEP_SUMMARY
        # Rustfmt Results

        \`cargo fmt\` reported formatting errors in the following locations.
        You can fix them by executing the following command and committing the changes.
        \`\`\`bash
        cargo fmt --all
        \`\`\`
        MARKDOWN_INTRO

            echo "${CARGO_OUTPUT}" |
                # Strip color codes
                sed 's/\x1B\[[0-9;]*[A-Za-z]//g' |
                # Strip (some) cursor movements
                sed 's/\x1B.[A-G]//g' |
                tr "\n" "\r" |
                # Wrap each location into a HTML details
                sed -E 's#Diff in ([^\r]*?) at line ([[:digit:]]+):\r((:?[ +-][^\r]*\r)+)#<details>\n<summary>\1:\2</summary>\n\n```diff\n\3```\n\n</details>\n\n#g' |
                tr "\r" "\n" >> $GITHUB_STEP_SUMMARY
        fi
        echo "11"
        # Print the original cargo message
        echo "${CARGO_OUTPUT}"
        echo "12"
        # Exit with the same status as cargo
        exit "${CARGO_STATUS}"